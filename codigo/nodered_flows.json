[
    {
        "id": "flow_monitoramento",
        "label": "Sistema Monitoramento Esgoto",
        "nodes": [
            {
                "id": "inject_check_health",
                "type": "inject",
                "name": "Check Health",
                "props": [
                    {
                        "p": "payload"
                    }
                ],
                "repeat": "30",
                "crontab": "",
                "once": true,
                "topic": "",
                "payload": "",
                "payloadType": "date",
                "x": 150,
                "y": 100,
                "wires": [["http_health_check"]]
            },
            {
                "id": "http_health_check",
                "type": "http request",
                "name": "Health Check API",
                "method": "GET",
                "ret": "obj",
                "paytoqs": "ignore",
                "url": "http://localhost:5000/api/health",
                "tls": "",
                "persist": false,
                "proxy": "",
                "authType": "",
                "x": 350,
                "y": 100,
                "wires": [["debug_health"]]
            },
            {
                "id": "debug_health",
                "type": "debug",
                "name": "System Status",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "statusVal": "",
                "statusType": "auto",
                "x": 550,
                "y": 100,
                "wires": []
            },
            {
                "id": "inject_get_sensors",
                "type": "inject",
                "name": "Get Sensors",
                "props": [
                    {
                        "p": "payload"
                    }
                ],
                "repeat": "60",
                "crontab": "",
                "once": false,
                "topic": "",
                "payload": "",
                "payloadType": "date",
                "x": 150,
                "y": 200,
                "wires": [["http_get_sensors"]]
            },
            {
                "id": "http_get_sensors",
                "type": "http request",
                "name": "Get Sensors List",
                "method": "GET",
                "ret": "obj",
                "paytoqs": "ignore",
                "url": "http://localhost:5000/api/sensors",
                "tls": "",
                "persist": false,
                "proxy": "",
                "authType": "",
                "x": 350,
                "y": 200,
                "wires": [["process_sensors"]]
            },
            {
                "id": "process_sensors",
                "type": "function",
                "name": "Process Sensors",
                "func": "// Processar lista de sensores\nif (msg.payload && msg.payload.sensors) {\n    const sensors = msg.payload.sensors;\n    \n    // Armazenar na memÃ³ria global\n    global.set('active_sensors', sensors);\n    \n    // Criar mensagens para cada sensor\n    const messages = sensors.map(sensorId => ({\n        payload: { sensor_id: sensorId }\n    }));\n    \n    node.status({fill: 'green', shape: 'dot', text: `${sensors.length} sensores ativos`});\n    \n    return [messages];\n} else {\n    node.status({fill: 'red', shape: 'ring', text: 'Erro ao obter sensores'});\n    return null;\n}",
                "outputs": 1,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 550,
                "y": 200,
                "wires": [["get_sensor_data"]]
            },
            {
                "id": "get_sensor_data",
                "type": "function",
                "name": "Build Sensor URL",
                "func": "// Construir URL para dados do sensor\nif (msg.payload && msg.payload.sensor_id) {\n    const sensorId = msg.payload.sensor_id;\n    msg.url = `http://localhost:5000/api/sensor/${sensorId}/latest`;\n    return msg;\n} else {\n    return null;\n}",
                "outputs": 1,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 150,
                "y": 300,
                "wires": [["http_get_sensor_data"]]
            },
            {
                "id": "http_get_sensor_data",
                "type": "http request",
                "name": "Get Sensor Data",
                "method": "GET",
                "ret": "obj",
                "paytoqs": "ignore",
                "url": "",
                "tls": "",
                "persist": false,
                "proxy": "",
                "authType": "",
                "x": 350,
                "y": 300,
                "wires": [["process_sensor_data"]]
            },
            {
                "id": "process_sensor_data",
                "type": "function",
                "name": "Process Sensor Data",
                "func": "// Processar dados do sensor\nif (msg.payload && msg.payload.data) {\n    const data = msg.payload.data;\n    const sensorId = data.sensor_id;\n    \n    // Verificar se hÃ¡ anomalias\n    if (data.is_anomaly) {\n        // Enviar alerta\n        msg.alert = {\n            sensor_id: sensorId,\n            timestamp: data.timestamp,\n            anomaly_count: data.anomaly_count || 0,\n            parameters: {\n                flow_rate: data.flow_rate,\n                pressure: data.pressure,\n                temperature: data.temperature,\n                ph_level: data.ph_level\n            }\n        };\n        \n        node.status({fill: 'red', shape: 'ring', text: `ALERTA - Sensor ${sensorId}`});\n        \n        return [null, msg]; // Enviar para saÃ­da de alertas\n    } else {\n        // Dados normais\n        msg.sensor_data = {\n            sensor_id: sensorId,\n            timestamp: data.timestamp,\n            flow_rate: data.flow_rate,\n            pressure: data.pressure,\n            temperature: data.temperature,\n            ph_level: data.ph_level,\n            turbidity: data.turbidity\n        };\n        \n        node.status({fill: 'green', shape: 'dot', text: `OK - Sensor ${sensorId}`});\n        \n        return [msg, null]; // Enviar para saÃ­da normal\n    }\n} else {\n    node.status({fill: 'yellow', shape: 'ring', text: 'Sem dados'});\n    return null;\n}",
                "outputs": 2,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 550,
                "y": 300,
                "wires": [["store_normal_data"], ["handle_alert"]]
            },
            {
                "id": "store_normal_data",
                "type": "function",
                "name": "Store Normal Data",
                "func": "// Armazenar dados normais\nif (msg.sensor_data) {\n    const data = msg.sensor_data;\n    \n    // Armazenar em contexto global (ou enviar para banco de dados)\n    let historico = global.get('sensor_history') || {};\n    \n    if (!historico[data.sensor_id]) {\n        historico[data.sensor_id] = [];\n    }\n    \n    historico[data.sensor_id].push({\n        timestamp: data.timestamp,\n        flow_rate: data.flow_rate,\n        pressure: data.pressure,\n        temperature: data.temperature,\n        ph_level: data.ph_level\n    });\n    \n    // Manter apenas Ãºltimos 100 registros por sensor\n    if (historico[data.sensor_id].length > 100) {\n        historico[data.sensor_id] = historico[data.sensor_id].slice(-100);\n    }\n    \n    global.set('sensor_history', historico);\n    \n    msg.payload = {\n        status: 'stored',\n        sensor_id: data.sensor_id,\n        timestamp: new Date().toISOString()\n    };\n    \n    return msg;\n}",
                "outputs": 1,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 760,
                "y": 260,
                "wires": [["debug_normal"]]
            },
            {
                "id": "handle_alert",
                "type": "function",
                "name": "Handle Alert",
                "func": "// Processar alertas\nif (msg.alert) {\n    const alert = msg.alert;\n    \n    // Armazenar alerta\n    let alertas = global.get('active_alerts') || [];\n    \n    // Adicionar timestamp do processamento\n    alert.processed_at = new Date().toISOString();\n    \n    alertas.push(alert);\n    \n    // Manter apenas Ãºltimos 50 alertas\n    if (alertas.length > 50) {\n        alertas = alertas.slice(-50);\n    }\n    \n    global.set('active_alerts', alertas);\n    \n    // Preparar mensagem para notificaÃ§Ã£o\n    msg.payload = {\n        alert_type: 'sensor_anomaly',\n        sensor_id: alert.sensor_id,\n        severity: alert.anomaly_count > 2 ? 'high' : 'medium',\n        message: `Anomalia detectada no sensor ${alert.sensor_id}`,\n        timestamp: alert.timestamp,\n        parameters: alert.parameters\n    };\n    \n    return msg;\n}",
                "outputs": 1,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 760,
                "y": 340,
                "wires": [["send_notification"]]
            },
            {
                "id": "send_notification",
                "type": "function",
                "name": "Send Notification",
                "func": "// Enviar notificaÃ§Ã£o (pode ser email, SMS, etc.)\nif (msg.payload) {\n    const alert = msg.payload;\n    \n    // Log da notificaÃ§Ã£o\n    node.warn(`ðŸš¨ ALERTA: ${alert.message}`);\n    \n    // Aqui vocÃª pode adicionar integraÃ§Ãµes com:\n    // - Email (node-red-node-email)\n    // - Slack (node-red-contrib-slack)\n    // - Telegram (node-red-contrib-telegrambot)\n    // - SMS (node-red-contrib-twilio)\n    \n    msg.notification = {\n        sent: true,\n        timestamp: new Date().toISOString(),\n        alert: alert\n    };\n    \n    return msg;\n}",
                "outputs": 1,
                "noerr": 0,
                "initialize": "",
                "finalize": "",
                "libs": [],
                "x": 960,
                "y": 340,
                "wires": [["debug_alert"]]
            },
            {
                "id": "debug_normal",
                "type": "debug",
                "name": "Normal Data",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "statusVal": "",
                "statusType": "auto",
                "x": 960,
                "y": 260,
                "wires": []
            },
            {
                "id": "debug_alert",
                "type": "debug",
                "name": "Alert Debug",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "statusVal": "",
                "statusType": "auto",
                "x": 1150,
                "y": 340,
                "wires": []
            },
            {
                "id": "inject_get_alerts",
                "type": "inject",
                "name": "Get All Alerts",
                "props": [
                    {
                        "p": "payload"
                    }
                ],
                "repeat": "120",
                "crontab": "",
                "once": false,
                "topic": "",
                "payload": "",
                "payloadType": "date",
                "x": 150,
                "y": 450,
                "wires": [["http_get_alerts"]]
            },
            {
                "id": "http_get_alerts",
                "type": "http request",
                "name": "Get System Alerts",
                "method": "GET",
                "ret": "obj",
                "paytoqs": "ignore",
                "url": "http://localhost:5000/api/alerts",
                "tls": "",
                "persist": false,
                "proxy": "",
                "authType": "",
                "x": 360,
                "y": 450,
                "wires": [["debug_system_alerts"]]
            },
            {
                "id": "debug_system_alerts",
                "type": "debug",
                "name": "System Alerts",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "statusVal": "",
                "statusType": "auto",
                "x": 570,
                "y": 450,
                "wires": []
            },
            {
                "id": "inject_send_data",
                "type": "inject",
                "name": "Simulate Sensor Data",
                "props": [
                    {
                        "p": "payload"
                    }
                ],
                "repeat": "",
                "crontab": "",
                "once": false,
                "topic": "",
                "payload": "{\n  \"sensor_id\": \"NodeRED_Test\",\n  \"flow_rate\": 45.5,\n  \"pressure\": 2.3,\n  \"temperature\": 22.5,\n  \"ph_level\": 7.2,\n  \"turbidity\": 15.0,\n  \"location_x\": -44.2549,\n  \"location_y\": -2.5227\n}",
                "payloadType": "json",
                "x": 170,
                "y": 550,
                "wires": [["http_send_data"]]
            },
            {
                "id": "http_send_data",
                "type": "http request",
                "name": "Send Data to API",
                "method": "POST",
                "ret": "obj",
                "paytoqs": "ignore",
                "url": "http://localhost:5000/api/data/process",
                "tls": "",
                "persist": false,
                "proxy": "",
                "authType": "",
                "x": 380,
                "y": 550,
                "wires": [["debug_send_result"]]
            },
            {
                "id": "debug_send_result",
                "type": "debug",
                "name": "Send Result",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "statusVal": "",
                "statusType": "auto",
                "x": 580,
                "y": 550,
                "wires": []
            }
        ]
    }
]